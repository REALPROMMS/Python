# print(type(name)) # функция, которая указывает на тип данных

# s = ‘hello,’ # создание 1-ой строки
# s = “world” # создание 2-ой строки
# print(s, w)


# Если Вы хотите закомментировать 1 строку достаточно применить
# специальный символ “#”, если Вам нужно закомментировать сразу
# несколько строк выделите их и нажмите ctrl + / или же используйте
# тройные кавычки ‘’’
# # print(1)
# # —------------------
# ’’’print(1)
# print(1)
# print(1)
# print(1)
# print(1)’’


# Интерполяция
# Иногда возникают такие ситуации, когда нужно вывести в одном
# предложение и числа и текст, но как это сделать более рационально и
# красиво, обратимся к такому понятию, как интерполяция.
# Интерполяция — способ получить сложную строку из нескольких простых
# с использованием специальных шаблонов.
# a = 3
# b = 11
# s = 2022
# print(a, b, s)
# print(a,'-'b,'-'s)
# print('{} - {} - {}'.format(a,b,s))
# print(f'first - {a} second - {b} third - {s}')



# Программный код: Вывод:
# n = 1.345 1
# print(int(n)) 345345
# # Отбрасывается дробная часть вне 690
# # зависимости больше 0.5 или меньше
# m = ‘345’
# print(m * 2)
# # При умножении строки на число,
# # она повторяется столько раз на
# # какое была умножена
# print(int(m) * 2)


# Помните в C# внутри цикла for мы писали i++. Это было сокращение
# от i = i + 1. Посмотри как можно сокращать операторы
# присваивания в Python
# iter = 2
# iter += 3 # iter = iter + 3
# iter -= 4 # iter = iter - 4
# iter *= 5 # iter = iter * 5
# iter /= 5 # iter = iter / 5
# iter //= 5 # iter = iter // 5
# iter %= 5 # iter = iter % 5
# iter **= 5 # iter = iter ** 5



# Сравнение в Python
# В Python мы можем выполнять следующие сравнения. Результатом
# чего будет либо True, либо False
# a = 1 > 4
# print(a) # False
# # —------------------------------------
# a = 1 < 4 and 5 > 2
# print(a) # True
# # —------------------------------------
# a = 1 == 2
# print(a) # False
# # —------------------------------------
# a = 1 != 2
# print(a) # True
# Сравнение в Python
# Можно сравнивать не только числовые значения, но и строки:
# a = 'qwe'
# b = 'qwe'
# print(a == b) # True
# В Python можно использовать тройные и даже четверные
# неравенства:
# a = 1 < 3 < 5 < 10
# print (a) # True


# Пользователь вводит число, необходимо найти минимальный делитель данного числа
# Решение:
# n = int(input())
# flag = True
# i = 2
# while flag:
#  if n % i == 0: # если остаток при делении числа n на i равен 0
#  flag = False
#  print(i)
#  elif i > n // 2: # делить числа не может превышать введенное число, деленное на 2
#  print(n)
#  flag = False
#  i += 1
# Задача
# Данный алгоритм будет работать до тех пор, пока не найдется минимальный делитель
# введенного числа. Когда будет найден первый делитель цикл



# Цикл for, функция range()
# ● Range выдает значения из диапазона с шагом 1.
# ● Если указано только одно число — от 0 до заданного числа.
# ● Если нужен другой шаг, третьим аргументов можно задать приращение.
# r = range(5) # 0 1 2 3 4
# r = range(2, 5) # 2 3 4
# r = range(-5, 0) # ----
# r = range(1, 10, 2) # 1 3 5 7
# r = range(100, 0, -20) # 100 80 60 40 20
# r = range(100, 0, -20) # range(100, 0, -20)
# for i in r:
# print(i)
# # 100 80 60 40 20



# Цикл for, функция range()
# Можно использовать цикл for() и со строками, так как у строк есть нумерация, такая же как и
# у массивов, начинается с 0:
#  for i in 'qwerty':
#  print(i)
#  # q
#  # w
#  # e
#  # r
#  # t
#  # y




# Немного о строках
# Возникают ситуации, когда в некоторых задачах необходимо поработать со строкой,
# которую ввел пользователь. Например: необходимо сделать все буквы маленькими, или
# поменять все буквы “ё” на “е”.
# text = 'СъЕШЬ ещё этих МяГкИх французских булок'
# print(len(text)) # 39
# print('ещё' in text) # True
# print(text.lower()) # съешь ещё этих мягких французских булок
# print(text.upper()) # СЪЕШЬ ЕЩЁ ЭТИХ МЯГКИХ ФРАНЦУЗСКИХ БУЛОК
# print(text.replace('ещё','ЕЩЁ')) # СъЕШЬ ЕЩЁ этих МяГкИх французских булок



# Срезы
# ● Мы представляем строку в виде массива символов. Значит мы можем обращаться к
# элементам по индексам.
# ● Отрицательное число в индексе — счёт с конца строки
#  text = 'съешь ещё этих мягких французских булок'
#  print(text[0]) # c
#  print(text[1]) # ъ
#  print(text[len(text)-1]) # к
#  print(text[-5]) # б
#  print(text[:]) # съешь ещё этих мягких французских булок
#  print(text[:2]) # съ
# Срезы
# ● Мы представляем строку в виде массива символов. Значит мы можем обращаться к
# элементам по индексам.
# ● Отрицательное число в индексе — счёт с конца строки
#  print(text[len(text)-2:]) # ок
#  print(text[2:9]) # ешь ещё
#  print(text[6:-18]) # ещё этих мягких
#  print(text[0:len(text):6]) # сеикакл
#  print(text[::6]) # сеикакл
#  text = text[2:9] + text[-5]